// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザーテーブル
model User {
  id              String    @id @default(uuid())
  employeeNumber  String    @unique
  username        String    @unique
  email           String    @unique
  password        String
  lastName        String
  firstName       String
  department      String?
  isAdmin         Boolean   @default(false)
  status          String    @default("active") // active, inactive
  sealImagePath   String?   // 担当者印画像パス
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  dailySchedules  DailySchedule[]
  issues          Issue[]
  assignedIssues  Issue[]    @relation("AssignedUser")
  comments        Comment[]
  estimates       Estimate[]
  invoices        Invoice[]
  purchaseOrders  PurchaseOrder[]

  @@map("users")
}

// プロジェクトテーブル
model Project {
  id               String    @id @default(uuid())
  projectNumber    String    @unique
  projectName      String
  description      String?
  status           String    @default("planning") // planning, developing, active, suspended, completed
  plannedStartDate DateTime?
  plannedEndDate   DateTime?
  actualStartDate  DateTime?
  actualEndDate    DateTime?
  budget           Decimal?  @db.Decimal(15, 2) // 予算（円）
  hourlyRate       Decimal?  @db.Decimal(10, 2) // 時間単価（円/時間）
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  schedulePlans    SchedulePlan[]
  scheduleActuals  ScheduleActual[]
  issues           Issue[]

  @@map("projects")
}

// 日別基本情報テーブル
model DailySchedule {
  id           String    @id @default(uuid())
  userId       String
  scheduleDate DateTime  @db.Date
  checkInTime  String?   // "09:00" 形式
  checkOutTime String?   // "18:00" 形式
  reflection   String?   @db.Text  // 所感
  status       String    @default("planned") // planned, in_progress, completed
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user         User      @relation(fields: [userId], references: [id])
  plans        SchedulePlan[]
  actuals      ScheduleActual[]

  @@unique([userId, scheduleDate])
  @@map("daily_schedules")
}

// 予定項目テーブル
model SchedulePlan {
  id            String        @id @default(uuid())
  scheduleId    String
  projectId     String?       // プロジェクト関連の場合
  content       String        // 予定内容
  details       String?       @db.Text
  displayOrder  Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  schedule      DailySchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  project       Project?      @relation(fields: [projectId], references: [id])

  @@map("schedule_plans")
}

// 実績項目テーブル
model ScheduleActual {
  id            String        @id @default(uuid())
  scheduleId    String
  projectId     String?       // プロジェクト関連の場合
  content       String        // 実績内容
  hours         Float         // 実績時間
  details       String?       @db.Text
  displayOrder  Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  schedule      DailySchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  project       Project?      @relation(fields: [projectId], references: [id])

  @@map("schedule_actuals")
}

// 課題管理テーブル
model Issue {
  id              String    @id @default(uuid())
  projectId       String
  title           String
  description     String    @db.Text
  status          String    @default("open") // open, in_progress, resolved, closed
  priority        String    @default("medium") // low, medium, high, critical
  category        String?   // bug, feature, improvement, task
  reporterId      String
  assigneeId      String?
  dueDate         DateTime?
  resolvedAt      DateTime?
  
  // ガントチャート用フィールド
  startDate       DateTime?
  endDate         DateTime?
  progress        Int       @default(0)
  dependencies    String?   @db.Text // JSON配列形式で依存タスクIDを格納
  parentIssueId   String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  project         Project   @relation(fields: [projectId], references: [id])
  reporter        User      @relation(fields: [reporterId], references: [id])
  assignee        User?     @relation("AssignedUser", fields: [assigneeId], references: [id])
  parentIssue     Issue?    @relation("IssueHierarchy", fields: [parentIssueId], references: [id])
  childIssues     Issue[]   @relation("IssueHierarchy")
  comments        Comment[]

  @@map("issues")
}

// コメントテーブル
model Comment {
  id          String    @id @default(uuid())
  issueId     String
  userId      String
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  issue       Issue     @relation(fields: [issueId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@map("comments")
}

// 自社情報テーブル
model Company {
  id                      String    @id @default(uuid())
  name                    String
  postalCode              String?
  address                 String?
  building                String?
  representative          String?
  phone                   String?
  fax                     String?
  remarks                 String?   @db.Text
  sealImagePath           String?   // 会社印画像パス
  // 請求書用追加フィールド
  qualifiedInvoiceNumber  String?   // 適格請求書発行事業者登録番号（例: "T1234567890123"）
  bankName                String?   // 銀行名
  branchName              String?   // 支店名
  accountType             String?   // 口座種別（普通/当座）
  accountNumber           String?   // 口座番号
  accountHolder           String?   // 口座名義
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  @@map("companies")
}

// 顧客テーブル
model Customer {
  id              String    @id @default(uuid())
  name            String
  postalCode      String?
  address         String?
  building        String?
  representative  String?
  phone           String?
  fax             String?
  remarks         String?   @db.Text
  status          String    @default("active") // active, inactive
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  estimates       Estimate[]
  invoices        Invoice[]
  purchaseOrders  PurchaseOrder[]

  @@map("customers")
}

// 見積書テーブル
model Estimate {
  id              String    @id @default(uuid())
  estimateNumber  String    @unique
  customerId      String
  honorific       String    @default("御中")
  subject         String
  issueDate       DateTime  @default(now())
  validUntil      DateTime
  userId          String
  taxType         String    @default("exclusive") // inclusive(税込), exclusive(税別)
  taxRate         Int       @default(10)
  roundingType    String    @default("floor") // floor(切り捨て), ceil(切り上げ), round(四捨五入)
  subtotal        Decimal   @default(0) @db.Decimal(15, 2)
  taxAmount       Decimal   @default(0) @db.Decimal(15, 2)
  totalAmount     Decimal   @default(0) @db.Decimal(15, 2)
  remarks         String?   @db.Text
  status          String    @default("draft") // draft, sent, accepted, rejected, expired
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  customer        Customer  @relation(fields: [customerId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
  items           EstimateItem[]
  invoice         Invoice?  // 変換後の請求書

  @@map("estimates")
}

// 見積明細テーブル
model EstimateItem {
  id              String    @id @default(uuid())
  estimateId      String
  name            String
  quantity        Decimal   @default(1) @db.Decimal(10, 2)
  unit            String?
  unitPrice       Decimal   @default(0) @db.Decimal(15, 2)
  taxType         String    @default("taxable") // taxable(課税), non-taxable(非課税), tax-included(税込)
  amount          Decimal   @default(0) @db.Decimal(15, 2)
  remarks         String?   @db.Text
  displayOrder    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  estimate        Estimate  @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  @@map("estimate_items")
}

// 請求書テーブル
model Invoice {
  id              String    @id @default(uuid())
  invoiceNumber   String    @unique
  estimateId      String?   @unique // 元見積書との紐付け（1対1）
  customerId      String
  honorific       String    @default("御中")
  subject         String
  issueDate       DateTime  @default(now())
  dueDate         DateTime
  userId          String
  taxType         String    @default("exclusive") // inclusive(税込), exclusive(税別)
  taxRate         Int       @default(10)
  roundingType    String    @default("floor") // floor(切り捨て), ceil(切り上げ), round(四捨五入)
  subtotal        Decimal   @default(0) @db.Decimal(15, 2)
  taxAmount       Decimal   @default(0) @db.Decimal(15, 2)
  taxAmount8      Decimal   @default(0) @db.Decimal(15, 2) // 8%税額
  taxAmount10     Decimal   @default(0) @db.Decimal(15, 2) // 10%税額
  totalAmount     Decimal   @default(0) @db.Decimal(15, 2)
  remarks         String?   @db.Text
  status          String    @default("draft") // draft, sent, paid, overdue, cancelled
  paidAmount      Decimal   @default(0) @db.Decimal(15, 2) // 入金済み金額
  paidDate        DateTime? // 入金日
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  estimate        Estimate? @relation(fields: [estimateId], references: [id])
  customer        Customer  @relation(fields: [customerId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
  items           InvoiceItem[]

  @@map("invoices")
}

// 請求明細テーブル
model InvoiceItem {
  id              String    @id @default(uuid())
  invoiceId       String
  name            String
  quantity        Decimal   @default(1) @db.Decimal(10, 2)
  unit            String?
  unitPrice       Decimal   @default(0) @db.Decimal(15, 2)
  taxType         String    @default("taxable") // taxable(課税), non-taxable(非課税), tax-included(税込)
  taxRate         Int       @default(10) // 8, 10, 0
  amount          Decimal   @default(0) @db.Decimal(15, 2)
  remarks         String?   @db.Text
  displayOrder    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  invoice         Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

// 発注書テーブル
model PurchaseOrder {
  id                String    @id @default(uuid())
  orderNumber       String    @unique
  supplierId        String    // 発注先（顧客テーブル参照）
  honorific         String    @default("御中")
  subject           String
  issueDate         DateTime  @default(now())
  deliveryDate      DateTime? // 納期
  completionPeriod  String?   // 研修完了期間
  deliveryLocation  String?   // 納入場所
  paymentTerms      String?   // お支払い条件
  userId            String
  taxType           String    @default("exclusive") // inclusive(税込), exclusive(税別)
  taxRate           Int       @default(10)
  roundingType      String    @default("floor") // floor(切り捨て), ceil(切り上げ), round(四捨五入)
  subtotal          Decimal   @default(0) @db.Decimal(15, 2)
  taxAmount         Decimal   @default(0) @db.Decimal(15, 2)
  taxAmount8        Decimal   @default(0) @db.Decimal(15, 2) // 8%税額
  taxAmount10       Decimal   @default(0) @db.Decimal(15, 2) // 10%税額
  totalAmount       Decimal   @default(0) @db.Decimal(15, 2)
  remarks           String?   @db.Text
  status            String    @default("draft") // draft, sent, confirmed, delivered, accepted, cancelled
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  supplier          Customer  @relation(fields: [supplierId], references: [id])
  user              User      @relation(fields: [userId], references: [id])
  items             PurchaseOrderItem[]

  @@map("purchase_orders")
}

// 発注明細テーブル
model PurchaseOrderItem {
  id                String    @id @default(uuid())
  purchaseOrderId   String
  name              String
  quantity          Decimal   @default(1) @db.Decimal(10, 2)
  unit              String?
  unitPrice         Decimal   @default(0) @db.Decimal(15, 2)
  taxType           String    @default("taxable") // taxable(課税), non-taxable(非課税), tax-included(税込)
  taxRate           Int       @default(10) // 8, 10, 0
  amount            Decimal   @default(0) @db.Decimal(15, 2)
  remarks           String?   @db.Text
  displayOrder      Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  @@map("purchase_order_items")
}

